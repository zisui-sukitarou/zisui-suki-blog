// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "user_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFavors holds the string denoting the favors edge name in mutations.
	EdgeFavors = "favors"
	// EdgeBlogs holds the string denoting the blogs edge name in mutations.
	EdgeBlogs = "blogs"
	// BlogFieldID holds the string denoting the ID field of the Blog.
	BlogFieldID = "blog_id"
	// Table holds the table name of the user in the database.
	Table = "users"
	// FavorsTable is the table that holds the favors relation/edge. The primary key declared below.
	FavorsTable = "user_favors"
	// FavorsInverseTable is the table name for the Blog entity.
	// It exists in this package in order to avoid circular dependency with the "blog" package.
	FavorsInverseTable = "blogs"
	// BlogsTable is the table that holds the blogs relation/edge.
	BlogsTable = "blogs"
	// BlogsInverseTable is the table name for the Blog entity.
	// It exists in this package in order to avoid circular dependency with the "blog" package.
	BlogsInverseTable = "blogs"
	// BlogsColumn is the table column denoting the blogs relation/edge.
	BlogsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldIcon,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// FavorsPrimaryKey and FavorsColumn2 are the table columns denoting the
	// primary key for the favors relation (M2M).
	FavorsPrimaryKey = []string{"user_id", "blog_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// IconValidator is a validator for the "icon" field. It is called by the builders before save.
	IconValidator func(string) error
)
