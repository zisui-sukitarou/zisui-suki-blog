// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BlogsColumns holds the columns for the "blogs" table.
	BlogsColumns = []*schema.Column{
		{Name: "blog_id", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"mysql": "char(26)"}},
		{Name: "content", Type: field.TypeString, Size: 2147483647, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "title", Type: field.TypeString, Size: 2147483647, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "abstract", Type: field.TypeString, Size: 2147483647, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "evaluation", Type: field.TypeUint, SchemaType: map[string]string{"mysql": "int unsigned"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(15)"}},
	}
	// BlogsTable holds the schema information for the "blogs" table.
	BlogsTable = &schema.Table{
		Name:       "blogs",
		Columns:    BlogsColumns,
		PrimaryKey: []*schema.Column{BlogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "blogs_users_writer",
				Columns:    []*schema.Column{BlogsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "tag_name", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "created_at", Type: field.TypeTime},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"mysql": "varchar(15)"}},
		{Name: "name", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "email", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "password", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(60)"}},
		{Name: "icon", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// BlogTagsColumns holds the columns for the "blog_tags" table.
	BlogTagsColumns = []*schema.Column{
		{Name: "blog_id", Type: field.TypeString, SchemaType: map[string]string{"mysql": "char(26)"}},
		{Name: "tag_id", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(32)"}},
	}
	// BlogTagsTable holds the schema information for the "blog_tags" table.
	BlogTagsTable = &schema.Table{
		Name:       "blog_tags",
		Columns:    BlogTagsColumns,
		PrimaryKey: []*schema.Column{BlogTagsColumns[0], BlogTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "blog_tags_blog_id",
				Columns:    []*schema.Column{BlogTagsColumns[0]},
				RefColumns: []*schema.Column{BlogsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "blog_tags_tag_id",
				Columns:    []*schema.Column{BlogTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFavorsColumns holds the columns for the "user_favors" table.
	UserFavorsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(15)"}},
		{Name: "blog_id", Type: field.TypeString, SchemaType: map[string]string{"mysql": "char(26)"}},
	}
	// UserFavorsTable holds the schema information for the "user_favors" table.
	UserFavorsTable = &schema.Table{
		Name:       "user_favors",
		Columns:    UserFavorsColumns,
		PrimaryKey: []*schema.Column{UserFavorsColumns[0], UserFavorsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_favors_user_id",
				Columns:    []*schema.Column{UserFavorsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_favors_blog_id",
				Columns:    []*schema.Column{UserFavorsColumns[1]},
				RefColumns: []*schema.Column{BlogsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BlogsTable,
		TagsTable,
		UsersTable,
		BlogTagsTable,
		UserFavorsTable,
	}
)

func init() {
	BlogsTable.ForeignKeys[0].RefTable = UsersTable
	BlogTagsTable.ForeignKeys[0].RefTable = BlogsTable
	BlogTagsTable.ForeignKeys[1].RefTable = TagsTable
	UserFavorsTable.ForeignKeys[0].RefTable = UsersTable
	UserFavorsTable.ForeignKeys[1].RefTable = BlogsTable
}
