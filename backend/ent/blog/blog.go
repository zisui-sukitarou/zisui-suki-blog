// Code generated by ent, DO NOT EDIT.

package blog

const (
	// Label holds the string label denoting the blog type in the database.
	Label = "blog"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "blog_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAbstract holds the string denoting the abstract field in the database.
	FieldAbstract = "abstract"
	// FieldEvaluation holds the string denoting the evaluation field in the database.
	FieldEvaluation = "evaluation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeWriter holds the string denoting the writer edge name in mutations.
	EdgeWriter = "writer"
	// TagFieldID holds the string denoting the ID field of the Tag.
	TagFieldID = "tag_name"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "user_id"
	// Table holds the table name of the blog in the database.
	Table = "blogs"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "blog_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_favors"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// WriterTable is the table that holds the writer relation/edge.
	WriterTable = "blogs"
	// WriterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	WriterInverseTable = "users"
	// WriterColumn is the table column denoting the writer relation/edge.
	WriterColumn = "user_id"
)

// Columns holds all SQL columns for blog fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldContent,
	FieldTitle,
	FieldAbstract,
	FieldEvaluation,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"blog_id", "tag_id"}
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "blog_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// AbstractValidator is a validator for the "abstract" field. It is called by the builders before save.
	AbstractValidator func(string) error
)
