// Code generated by ent, DO NOT EDIT.

package draft

const (
	// Label holds the string label denoting the draft type in the database.
	Label = "draft"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "draft_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAbstract holds the string denoting the abstract field in the database.
	FieldAbstract = "abstract"
	// FieldEvaluation holds the string denoting the evaluation field in the database.
	FieldEvaluation = "evaluation"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// TagFieldID holds the string denoting the ID field of the Tag.
	TagFieldID = "tag_name"
	// Table holds the table name of the draft in the database.
	Table = "drafts"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "draft_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
)

// Columns holds all SQL columns for draft fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldContent,
	FieldTitle,
	FieldAbstract,
	FieldEvaluation,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"draft_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
