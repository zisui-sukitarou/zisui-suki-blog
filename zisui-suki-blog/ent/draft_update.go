// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"zisui-suki-blog/ent/draft"
	"zisui-suki-blog/ent/predicate"
	"zisui-suki-blog/ent/tag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DraftUpdate is the builder for updating Draft entities.
type DraftUpdate struct {
	config
	hooks    []Hook
	mutation *DraftMutation
}

// Where appends a list predicates to the DraftUpdate builder.
func (du *DraftUpdate) Where(ps ...predicate.Draft) *DraftUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUserID sets the "user_id" field.
func (du *DraftUpdate) SetUserID(s string) *DraftUpdate {
	du.mutation.SetUserID(s)
	return du
}

// SetContent sets the "content" field.
func (du *DraftUpdate) SetContent(s string) *DraftUpdate {
	du.mutation.SetContent(s)
	return du
}

// SetTitle sets the "title" field.
func (du *DraftUpdate) SetTitle(s string) *DraftUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetAbstract sets the "abstract" field.
func (du *DraftUpdate) SetAbstract(s string) *DraftUpdate {
	du.mutation.SetAbstract(s)
	return du
}

// SetEvaluation sets the "evaluation" field.
func (du *DraftUpdate) SetEvaluation(u uint) *DraftUpdate {
	du.mutation.ResetEvaluation()
	du.mutation.SetEvaluation(u)
	return du
}

// AddEvaluation adds u to the "evaluation" field.
func (du *DraftUpdate) AddEvaluation(u int) *DraftUpdate {
	du.mutation.AddEvaluation(u)
	return du
}

// SetStatus sets the "status" field.
func (du *DraftUpdate) SetStatus(u uint) *DraftUpdate {
	du.mutation.ResetStatus()
	du.mutation.SetStatus(u)
	return du
}

// AddStatus adds u to the "status" field.
func (du *DraftUpdate) AddStatus(u int) *DraftUpdate {
	du.mutation.AddStatus(u)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DraftUpdate) SetUpdatedAt(t time.Time) *DraftUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (du *DraftUpdate) AddTagIDs(ids ...string) *DraftUpdate {
	du.mutation.AddTagIDs(ids...)
	return du
}

// AddTags adds the "tags" edges to the Tag entity.
func (du *DraftUpdate) AddTags(t ...*Tag) *DraftUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.AddTagIDs(ids...)
}

// Mutation returns the DraftMutation object of the builder.
func (du *DraftUpdate) Mutation() *DraftMutation {
	return du.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (du *DraftUpdate) ClearTags() *DraftUpdate {
	du.mutation.ClearTags()
	return du
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (du *DraftUpdate) RemoveTagIDs(ids ...string) *DraftUpdate {
	du.mutation.RemoveTagIDs(ids...)
	return du
}

// RemoveTags removes "tags" edges to Tag entities.
func (du *DraftUpdate) RemoveTags(t ...*Tag) *DraftUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DraftUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DraftUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DraftUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DraftUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DraftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   draft.Table,
			Columns: draft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: draft.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldUserID,
		})
	}
	if value, ok := du.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldContent,
		})
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldTitle,
		})
	}
	if value, ok := du.mutation.Abstract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldAbstract,
		})
	}
	if value, ok := du.mutation.Evaluation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldEvaluation,
		})
	}
	if value, ok := du.mutation.AddedEvaluation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldEvaluation,
		})
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldStatus,
		})
	}
	if value, ok := du.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldStatus,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draft.FieldUpdatedAt,
		})
	}
	if du.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.TagsTable,
			Columns: draft.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedTagsIDs(); len(nodes) > 0 && !du.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.TagsTable,
			Columns: draft.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.TagsTable,
			Columns: draft.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{draft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DraftUpdateOne is the builder for updating a single Draft entity.
type DraftUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DraftMutation
}

// SetUserID sets the "user_id" field.
func (duo *DraftUpdateOne) SetUserID(s string) *DraftUpdateOne {
	duo.mutation.SetUserID(s)
	return duo
}

// SetContent sets the "content" field.
func (duo *DraftUpdateOne) SetContent(s string) *DraftUpdateOne {
	duo.mutation.SetContent(s)
	return duo
}

// SetTitle sets the "title" field.
func (duo *DraftUpdateOne) SetTitle(s string) *DraftUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetAbstract sets the "abstract" field.
func (duo *DraftUpdateOne) SetAbstract(s string) *DraftUpdateOne {
	duo.mutation.SetAbstract(s)
	return duo
}

// SetEvaluation sets the "evaluation" field.
func (duo *DraftUpdateOne) SetEvaluation(u uint) *DraftUpdateOne {
	duo.mutation.ResetEvaluation()
	duo.mutation.SetEvaluation(u)
	return duo
}

// AddEvaluation adds u to the "evaluation" field.
func (duo *DraftUpdateOne) AddEvaluation(u int) *DraftUpdateOne {
	duo.mutation.AddEvaluation(u)
	return duo
}

// SetStatus sets the "status" field.
func (duo *DraftUpdateOne) SetStatus(u uint) *DraftUpdateOne {
	duo.mutation.ResetStatus()
	duo.mutation.SetStatus(u)
	return duo
}

// AddStatus adds u to the "status" field.
func (duo *DraftUpdateOne) AddStatus(u int) *DraftUpdateOne {
	duo.mutation.AddStatus(u)
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DraftUpdateOne) SetUpdatedAt(t time.Time) *DraftUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (duo *DraftUpdateOne) AddTagIDs(ids ...string) *DraftUpdateOne {
	duo.mutation.AddTagIDs(ids...)
	return duo
}

// AddTags adds the "tags" edges to the Tag entity.
func (duo *DraftUpdateOne) AddTags(t ...*Tag) *DraftUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.AddTagIDs(ids...)
}

// Mutation returns the DraftMutation object of the builder.
func (duo *DraftUpdateOne) Mutation() *DraftMutation {
	return duo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (duo *DraftUpdateOne) ClearTags() *DraftUpdateOne {
	duo.mutation.ClearTags()
	return duo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (duo *DraftUpdateOne) RemoveTagIDs(ids ...string) *DraftUpdateOne {
	duo.mutation.RemoveTagIDs(ids...)
	return duo
}

// RemoveTags removes "tags" edges to Tag entities.
func (duo *DraftUpdateOne) RemoveTags(t ...*Tag) *DraftUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.RemoveTagIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DraftUpdateOne) Select(field string, fields ...string) *DraftUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Draft entity.
func (duo *DraftUpdateOne) Save(ctx context.Context) (*Draft, error) {
	var (
		err  error
		node *Draft
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Draft)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DraftMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DraftUpdateOne) SaveX(ctx context.Context) *Draft {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DraftUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DraftUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DraftUpdateOne) sqlSave(ctx context.Context) (_node *Draft, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   draft.Table,
			Columns: draft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: draft.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Draft.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, draft.FieldID)
		for _, f := range fields {
			if !draft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != draft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldUserID,
		})
	}
	if value, ok := duo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldContent,
		})
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldTitle,
		})
	}
	if value, ok := duo.mutation.Abstract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldAbstract,
		})
	}
	if value, ok := duo.mutation.Evaluation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldEvaluation,
		})
	}
	if value, ok := duo.mutation.AddedEvaluation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldEvaluation,
		})
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldStatus,
		})
	}
	if value, ok := duo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldStatus,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draft.FieldUpdatedAt,
		})
	}
	if duo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.TagsTable,
			Columns: draft.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !duo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.TagsTable,
			Columns: draft.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.TagsTable,
			Columns: draft.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Draft{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{draft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
