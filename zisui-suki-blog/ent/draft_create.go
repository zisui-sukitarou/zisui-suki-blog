// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"zisui-suki-blog/ent/draft"
	"zisui-suki-blog/ent/tag"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DraftCreate is the builder for creating a Draft entity.
type DraftCreate struct {
	config
	mutation *DraftMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (dc *DraftCreate) SetUserID(s string) *DraftCreate {
	dc.mutation.SetUserID(s)
	return dc
}

// SetContent sets the "content" field.
func (dc *DraftCreate) SetContent(s string) *DraftCreate {
	dc.mutation.SetContent(s)
	return dc
}

// SetTitle sets the "title" field.
func (dc *DraftCreate) SetTitle(s string) *DraftCreate {
	dc.mutation.SetTitle(s)
	return dc
}

// SetAbstract sets the "abstract" field.
func (dc *DraftCreate) SetAbstract(s string) *DraftCreate {
	dc.mutation.SetAbstract(s)
	return dc
}

// SetEvaluation sets the "evaluation" field.
func (dc *DraftCreate) SetEvaluation(u uint) *DraftCreate {
	dc.mutation.SetEvaluation(u)
	return dc
}

// SetStatus sets the "status" field.
func (dc *DraftCreate) SetStatus(u uint) *DraftCreate {
	dc.mutation.SetStatus(u)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DraftCreate) SetCreatedAt(t time.Time) *DraftCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DraftCreate) SetUpdatedAt(t time.Time) *DraftCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetID sets the "id" field.
func (dc *DraftCreate) SetID(s string) *DraftCreate {
	dc.mutation.SetID(s)
	return dc
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (dc *DraftCreate) AddTagIDs(ids ...string) *DraftCreate {
	dc.mutation.AddTagIDs(ids...)
	return dc
}

// AddTags adds the "tags" edges to the Tag entity.
func (dc *DraftCreate) AddTags(t ...*Tag) *DraftCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dc.AddTagIDs(ids...)
}

// Mutation returns the DraftMutation object of the builder.
func (dc *DraftCreate) Mutation() *DraftMutation {
	return dc.mutation
}

// Save creates the Draft in the database.
func (dc *DraftCreate) Save(ctx context.Context) (*Draft, error) {
	var (
		err  error
		node *Draft
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Draft)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DraftMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DraftCreate) SaveX(ctx context.Context) *Draft {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DraftCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DraftCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DraftCreate) check() error {
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Draft.user_id"`)}
	}
	if _, ok := dc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Draft.content"`)}
	}
	if _, ok := dc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Draft.title"`)}
	}
	if _, ok := dc.mutation.Abstract(); !ok {
		return &ValidationError{Name: "abstract", err: errors.New(`ent: missing required field "Draft.abstract"`)}
	}
	if _, ok := dc.mutation.Evaluation(); !ok {
		return &ValidationError{Name: "evaluation", err: errors.New(`ent: missing required field "Draft.evaluation"`)}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Draft.status"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Draft.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Draft.updated_at"`)}
	}
	return nil
}

func (dc *DraftCreate) sqlSave(ctx context.Context) (*Draft, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Draft.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (dc *DraftCreate) createSpec() (*Draft, *sqlgraph.CreateSpec) {
	var (
		_node = &Draft{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: draft.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: draft.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := dc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := dc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := dc.mutation.Abstract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldAbstract,
		})
		_node.Abstract = value
	}
	if value, ok := dc.mutation.Evaluation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldEvaluation,
		})
		_node.Evaluation = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: draft.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draft.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draft.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := dc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.TagsTable,
			Columns: draft.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DraftCreateBulk is the builder for creating many Draft entities in bulk.
type DraftCreateBulk struct {
	config
	builders []*DraftCreate
}

// Save creates the Draft entities in the database.
func (dcb *DraftCreateBulk) Save(ctx context.Context) ([]*Draft, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Draft, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DraftMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DraftCreateBulk) SaveX(ctx context.Context) []*Draft {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DraftCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DraftCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
